<snippet>
	<content><![CDATA[
template<typename T>
struct segment_tree {
    using F = std::function<T(const T&, const T&)>;
 
    int n;
    vector<T> t;
    T e;
    F f;
 
    segment_tree() : n(), e(), f() {}
 
    template<typename U>
    segment_tree(const U &arr, int n, T e, F f): n(n), t(4 * n + 8), e(e), f(f) {
        build(arr, 1, 1, n);
    }
 
    template<typename U>
    void build(const U &arr, int i, int l, int r) {
        if (l == r) {
            t[i] = T(arr[l]);
            return;
        }
        int mid = (l + r) >> 1;
        build(arr, i << 1, l, mid);
        build(arr, i << 1 | 1, mid + 1, r);
        t[i] = f(t[i << 1], t[i << 1 | 1]);
    }
 
    template<typename U>
    void update(int idx, U val) {
        update_helper(idx, val, 1, 1, n);
    }
 
    template<typename U>
    void update_helper(int idx, U val, int i, int l, int r) {
        if (l == r) {
            t[i] = T(val);
            return;
        }
        int mid = (l + r) >> 1;
        if (idx <= mid)
            update_helper(idx, val, i << 1, l, mid);
        else update_helper(idx, val, i << 1 | 1, mid + 1, r);
        t[i] = f(t[i << 1], t[i << 1 | 1]);
    }
 
    T query(int ql, int qr) {
        return query_helper(ql, qr, 1, 1, n);
    }
 
    T query_helper(int ql, int qr, int i, int l, int r) {
        if (ql > r or qr < l)
            return e;
        if (ql <= l and r <= qr)
            return t[i];
        int mid = (l + r) >> 1;
        T x = query_helper(ql, qr, i << 1, l, mid), y = query_helper(ql, qr, i << 1 | 1, mid + 1, r);
        return f(x, y);
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segment_tree_normal</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
